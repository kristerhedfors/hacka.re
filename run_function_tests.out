Starting HTTP server for tests...
===== Starting HTTP Server for hacka.re Tests =====
Port: 8000
Project Root: /Users/user/dev/hacka.re
==================================================
Checking for existing HTTP server processes on port 8000...
Found existing processes: 37048
37086
Killing existing processes...
Processes killed.
Changing to project root directory: /Users/user/dev/hacka.re
Starting Python HTTP server on port 8000...
Server started successfully with PID: 37169
Server is now running at http://localhost:8000
Server PID saved to: /Users/user/dev/hacka.re/_tests/playwright/server_pid.txt
==================================================
Server is ready. You can now run your tests.
To stop the server, run: kill -9 $(cat /Users/user/dev/hacka.re/_tests/playwright/server_pid.txt)
==================================================
Running Function tests with chromium browser...
Test filter: test_function_modal or test_function_group_colors or test_function_deletion or test_function_editing or test_function_icons or test_function_copy_buttons or test_function_library_copy or test_function_library_multi or test_function_library_sharing or test_function_parsing_logic or test_function_tooltip or test_function_bundle_preservation

============================= test session starts ==============================
platform darwin -- Python 3.13.3, pytest-8.3.5, pluggy-1.5.0 -- /Users/user/dev/hacka.re/_tests/playwright/.venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/user/dev/hacka.re/_tests/playwright
configfile: pytest.ini
testpaths: .
plugins: playwright-0.7.0, base-url-2.1.0
collecting ... collected 918 items / 878 deselected / 40 selected

test_function_bundle_preservation.py::test_function_bundle_preservation_when_editing[chromium0] PASSED [  2%]
test_function_copy_buttons.py::test_function_copy_buttons_exist[chromium0] PASSED [  5%]
test_function_copy_buttons.py::test_function_copy_functionality[chromium0] PASSED [  7%]
test_function_deletion.py::test_function_deletion_removes_entire_bundle[chromium0] PASSED [ 10%]
test_function_deletion.py::test_multiple_function_collections[chromium0] PASSED [ 12%]
test_function_editing.py::test_function_editing[chromium0] PASSED        [ 15%]
test_function_group_colors.py::test_function_collection_colors[chromium0] FAILED [ 17%]
test_function_icons.py::test_function_calling_icons[chromium0] FAILED    [ 20%]
test_function_icons.py::test_multiple_function_calls_colors[chromium0] FAILED [ 22%]
test_function_library_multi.py::test_function_library_multi[chromium0] FAILED [ 25%]
test_function_library_sharing.py::test_function_library_sharing[chromium0] FAILED [ 27%]
test_function_modal.py::test_function_modal_basic[chromium0] FAILED      [ 30%]
test_function_modal.py::test_function_modal_elements[chromium0] PASSED   [ 32%]
test_function_parsing_logic.py::test_all_functions_callable_by_default[chromium0] FAILED [ 35%]
test_function_parsing_logic.py::test_only_tagged_functions_callable[chromium0] FAILED [ 37%]
test_function_parsing_logic.py::test_tool_tag_works[chromium0] FAILED    [ 40%]
test_function_parsing_logic.py::test_single_line_comment_tags[chromium0] FAILED [ 42%]
test_function_parsing_logic.py::test_mixed_tag_types[chromium0] FAILED   [ 45%]
test_function_tooltip.py::test_function_modal_basic[chromium0] PASSED    [ 47%]
test_function_tooltip.py::test_function_modal_elements[chromium0] PASSED [ 50%]
test_function_bundle_preservation.py::test_function_bundle_preservation_when_editing[chromium1] PASSED [ 52%]
test_function_copy_buttons.py::test_function_copy_buttons_exist[chromium1] PASSED [ 55%]
test_function_copy_buttons.py::test_function_copy_functionality[chromium1] PASSED [ 57%]
test_function_deletion.py::test_function_deletion_removes_entire_bundle[chromium1] PASSED [ 60%]
test_function_deletion.py::test_multiple_function_collections[chromium1] FAILED [ 62%]
test_function_editing.py::test_function_editing[chromium1] PASSED        [ 65%]
test_function_group_colors.py::test_function_collection_colors[chromium1] FAILED [ 67%]
test_function_icons.py::test_function_calling_icons[chromium1] FAILED    [ 70%]
test_function_icons.py::test_multiple_function_calls_colors[chromium1] FAILED [ 72%]
test_function_library_multi.py::test_function_library_multi[chromium1] FAILED [ 75%]
test_function_library_sharing.py::test_function_library_sharing[chromium1] FAILED [ 77%]
test_function_modal.py::test_function_modal_basic[chromium1] PASSED      [ 80%]
test_function_modal.py::test_function_modal_elements[chromium1] PASSED   [ 82%]
test_function_parsing_logic.py::test_all_functions_callable_by_default[chromium1] FAILED [ 85%]
test_function_parsing_logic.py::test_only_tagged_functions_callable[chromium1] FAILED [ 87%]
test_function_parsing_logic.py::test_tool_tag_works[chromium1] FAILED    [ 90%]
test_function_parsing_logic.py::test_single_line_comment_tags[chromium1] FAILED [ 92%]
test_function_parsing_logic.py::test_mixed_tag_types[chromium1] FAILED   [ 95%]
test_function_tooltip.py::test_function_modal_basic[chromium1] PASSED    [ 97%]
test_function_tooltip.py::test_function_modal_elements[chromium1] PASSED [100%]

=================================== FAILURES ===================================
__________________ test_function_collection_colors[chromium0] __________________

page = <Page url='about:blank'>, serve_hacka_re = 'http://localhost:8000'
api_key = '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'

    def test_function_collection_colors(page: Page, serve_hacka_re, api_key):
        """Test that functions from the same import are collected by color and deletion works for the entire collection."""
        # Set up console error logging
        setup_console_logging(page)
    
        # Navigate to the page
>       page.goto(serve_hacka_re)

test_function_group_colors.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.13/site-packages/playwright/sync_api/_generated.py:9024: in goto
    self._sync(
.venv/lib/python3.13/site-packages/playwright/_impl/_page.py:552: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
.venv/lib/python3.13/site-packages/playwright/_impl/_frame.py:145: in goto
    await self._channel.send("goto", locals_to_params(locals()))
.venv/lib/python3.13/site-packages/playwright/_impl/_connection.py:61: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <playwright._impl._connection.Connection object at 0x1110cf8c0>
cb = <function Channel.send.<locals>.<lambda> at 0x1117feb60>
is_internal = False

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(task, "__pw_stack__", inspect.stack())
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.TimeoutError: Page.goto: Timeout 10000ms exceeded.
E           Call log:
E             - navigating to "http://localhost:8000/", waiting until "load"

.venv/lib/python3.13/site-packages/playwright/_impl/_connection.py:528: TimeoutError
--------------------------- Captured stdout teardown ---------------------------
HTTP server process already terminated
____________________ test_function_calling_icons[chromium0] ____________________

page = <Page url='http://localhost:8000/'>
serve_hacka_re = 'http://localhost:8000'
api_key = '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'

    def test_function_calling_icons(page: Page, serve_hacka_re, api_key):
        """Test that function calling icons appear inline with the token stream."""
        # Set up console error logging
        setup_console_logging(page)
    
        # Navigate to the page
        page.goto(serve_hacka_re)
    
        # Dismiss welcome modal if present
        dismiss_welcome_modal(page)
    
        # Dismiss settings modal if already open
        # Configure API key and model
>       configure_api_key_and_model(page, api_key)

test_function_icons.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

page = <Page url='http://localhost:8000/'>
api_key = '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'

    def configure_api_key_and_model(page, api_key):
        """Configure API key and select a function calling model."""
        print("Configuring API key and model...")
    
        # Click the settings button
        settings_button = page.locator("#settings-btn")
        settings_button.click(timeout=1000)
    
        # Wait for the settings modal to become visible
        page.wait_for_selector("#settings-modal.active", state="visible", timeout=2000)
    
        # Take a screenshot of the settings modal for debugging
        page.screenshot(path="_tests/playwright/videos/settings_modal_initial.png")
    
        # Enter the API key from .env
        api_key_input = page.locator("#api-key-update")
        api_key_input.fill(api_key)
    
        # Get OPENAI_API_BASE and OPENAI_API_MODEL from conftest.py
        import sys
        import os
        # Add the parent directory (playwright) to path to import from main conftest
        playwright_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
        if playwright_dir not in sys.path:
            sys.path.insert(0, playwright_dir)
>       from conftest import OPENAI_API_BASE, OPENAI_API_MODEL
E       ImportError: cannot import name 'OPENAI_API_BASE' from 'conftest' (/Users/user/dev/hacka.re/_tests/playwright/shodan/conftest.py)

function_calling_api/helpers/setup_helpers.py:49: ImportError
----------------------------- Captured stdout call -----------------------------
welcome-modal is visible, closing it
Found close button with selector: #close-welcome-modal
Clicked close button
Modal closed successfully
Configuring API key and model...
--------------------------- Captured stdout teardown ---------------------------
HTTP server process already terminated
________________ test_multiple_function_calls_colors[chromium0] ________________

page = <Page url='http://localhost:8000/'>
serve_hacka_re = 'http://localhost:8000'
api_key = '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'

    def test_multiple_function_calls_colors(page: Page, serve_hacka_re, api_key):
        """Test that multiple function calls use different colors."""
        # Set up console error logging
        setup_console_logging(page)
    
        # Navigate to the page
        page.goto(serve_hacka_re)
    
        # Dismiss welcome modal if present
        dismiss_welcome_modal(page)
    
        # Dismiss settings modal if already open
        # Configure API key and model
>       configure_api_key_and_model(page, api_key)

test_function_icons.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

page = <Page url='http://localhost:8000/'>
api_key = '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'

    def configure_api_key_and_model(page, api_key):
        """Configure API key and select a function calling model."""
        print("Configuring API key and model...")
    
        # Click the settings button
        settings_button = page.locator("#settings-btn")
        settings_button.click(timeout=1000)
    
        # Wait for the settings modal to become visible
        page.wait_for_selector("#settings-modal.active", state="visible", timeout=2000)
    
        # Take a screenshot of the settings modal for debugging
        page.screenshot(path="_tests/playwright/videos/settings_modal_initial.png")
    
        # Enter the API key from .env
        api_key_input = page.locator("#api-key-update")
        api_key_input.fill(api_key)
    
        # Get OPENAI_API_BASE and OPENAI_API_MODEL from conftest.py
        import sys
        import os
        # Add the parent directory (playwright) to path to import from main conftest
        playwright_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
        if playwright_dir not in sys.path:
            sys.path.insert(0, playwright_dir)
>       from conftest import OPENAI_API_BASE, OPENAI_API_MODEL
E       ImportError: cannot import name 'OPENAI_API_BASE' from 'conftest' (/Users/user/dev/hacka.re/_tests/playwright/shodan/conftest.py)

function_calling_api/helpers/setup_helpers.py:49: ImportError
----------------------------- Captured stdout call -----------------------------
welcome-modal is visible, closing it
Found close button with selector: #close-welcome-modal
Clicked close button
Modal closed successfully
Configuring API key and model...
--------------------------- Captured stdout teardown ---------------------------
HTTP server process already terminated
____________________ test_function_library_multi[chromium0] ____________________

page = <Page url='http://localhost:8000/'>
serve_hacka_re = 'http://localhost:8000'
api_key = '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'

    def test_function_library_multi(page: Page, serve_hacka_re, api_key):
        """Test the multi-function library with @tool tag."""
        # Set up console error logging
        setup_console_logging(page)
    
        # Navigate to the page
        page.goto(serve_hacka_re)
    
        # Dismiss welcome modal if present
        dismiss_welcome_modal(page)
    
        # Dismiss settings modal if already open
        # Configure API key and model
>       configure_api_key_and_model(page, api_key)

test_function_library_multi.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

page = <Page url='http://localhost:8000/'>
api_key = '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'

    def configure_api_key_and_model(page, api_key):
        """Configure API key and select a function calling model."""
        print("Configuring API key and model...")
    
        # Click the settings button
        settings_button = page.locator("#settings-btn")
        settings_button.click(timeout=1000)
    
        # Wait for the settings modal to become visible
        page.wait_for_selector("#settings-modal.active", state="visible", timeout=2000)
    
        # Take a screenshot of the settings modal for debugging
        page.screenshot(path="_tests/playwright/videos/settings_modal_initial.png")
    
        # Enter the API key from .env
        api_key_input = page.locator("#api-key-update")
        api_key_input.fill(api_key)
    
        # Get OPENAI_API_BASE and OPENAI_API_MODEL from conftest.py
        import sys
        import os
        # Add the parent directory (playwright) to path to import from main conftest
        playwright_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
        if playwright_dir not in sys.path:
            sys.path.insert(0, playwright_dir)
>       from conftest import OPENAI_API_BASE, OPENAI_API_MODEL
E       ImportError: cannot import name 'OPENAI_API_BASE' from 'conftest' (/Users/user/dev/hacka.re/_tests/playwright/shodan/conftest.py)

function_calling_api/helpers/setup_helpers.py:49: ImportError
----------------------------- Captured stdout call -----------------------------
welcome-modal is visible, closing it
Found close button with selector: #close-welcome-modal
Clicked close button
Modal closed successfully
Configuring API key and model...
--------------------------- Captured stdout teardown ---------------------------
HTTP server process already terminated
___________________ test_function_library_sharing[chromium0] ___________________

page = <Page url='about:blank'>, serve_hacka_re = 'http://localhost:8000'

    def test_function_library_sharing(page: Page, serve_hacka_re):
        """
        Test that function library can be shared and loaded from a shared link.
    
        This test:
        1. Creates a test function
        2. Shares it using the function library option
        3. Deletes the function
        4. Loads the shared link
        5. Verifies the function is restored
        """
        # STEP 1: Navigate to the application
>       page.goto(serve_hacka_re)

test_function_library_sharing.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.13/site-packages/playwright/sync_api/_generated.py:9024: in goto
    self._sync(
.venv/lib/python3.13/site-packages/playwright/_impl/_page.py:552: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
.venv/lib/python3.13/site-packages/playwright/_impl/_frame.py:145: in goto
    await self._channel.send("goto", locals_to_params(locals()))
.venv/lib/python3.13/site-packages/playwright/_impl/_connection.py:61: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <playwright._impl._connection.Connection object at 0x1110cf8c0>
cb = <function Channel.send.<locals>.<lambda> at 0x1127b3ba0>
is_internal = False

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(task, "__pw_stack__", inspect.stack())
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_SOCKET_NOT_CONNECTED at http://localhost:8000/
E           Call log:
E             - navigating to "http://localhost:8000/", waiting until "load"

.venv/lib/python3.13/site-packages/playwright/_impl/_connection.py:528: Error
--------------------------- Captured stdout teardown ---------------------------
HTTP server process already terminated
_____________________ test_function_modal_basic[chromium0] _____________________

page = <Page url='http://localhost:8000/'>
serve_hacka_re = 'http://localhost:8000'

    def test_function_modal_basic(page: Page, serve_hacka_re):
        """Test basic function modal functionality"""
        page.goto(serve_hacka_re)
        dismiss_welcome_modal(page)
        # Open function modal
        function_btn = page.locator("#function-btn")
        expect(function_btn).to_be_visible()
        function_btn.click()
    
        # Check if the function modal is visible
        function_modal = page.locator("#function-modal")
>       expect(function_modal).to_be_visible()
E       AssertionError: Locator expected to be visible
E       Actual value: hidden 
E       Call log:
E         - LocatorAssertions.to_be_visible with timeout 5000ms
E         - waiting for locator("#function-modal")
E           9 × locator resolved to <div class="modal" id="function-modal">…</div>
E             - unexpected value "hidden"

test_function_modal.py:17: AssertionError
--------------------------- Captured stdout teardown ---------------------------
HTTP server process already terminated
______________ test_all_functions_callable_by_default[chromium0] _______________

page = <Page url='http://localhost:8000/'>
serve_hacka_re = 'http://localhost:8000'
api_key = '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'

    def test_all_functions_callable_by_default(page: Page, serve_hacka_re, api_key):
        """Test that all functions are callable by default when no tags are present."""
        # Set up console error logging
        setup_console_logging(page)
    
        # Navigate to the page
        page.goto(serve_hacka_re)
    
        # Dismiss welcome modal if present
        dismiss_welcome_modal(page)
    
        # Dismiss settings modal if already open
        # Configure API key and model
>       configure_api_key_and_model(page, api_key)

test_function_parsing_logic.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
function_calling_api/helpers/setup_helpers.py:33: in configure_api_key_and_model
    page.wait_for_selector("#settings-modal.active", state="visible", timeout=2000)
.venv/lib/python3.13/site-packages/playwright/sync_api/_generated.py:8187: in wait_for_selector
    self._sync(
.venv/lib/python3.13/site-packages/playwright/_impl/_page.py:425: in wait_for_selector
    return await self._main_frame.wait_for_selector(**locals_to_params(locals()))
.venv/lib/python3.13/site-packages/playwright/_impl/_frame.py:323: in wait_for_selector
    await self._channel.send("waitForSelector", locals_to_params(locals()))
.venv/lib/python3.13/site-packages/playwright/_impl/_connection.py:61: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <playwright._impl._connection.Connection object at 0x1110cf8c0>
cb = <function Channel.send.<locals>.<lambda> at 0x1119d02c0>
is_internal = False

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(task, "__pw_stack__", inspect.stack())
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.TimeoutError: Page.wait_for_selector: Timeout 2000ms exceeded.
E           Call log:
E             - waiting for locator("#settings-modal.active") to be visible

.venv/lib/python3.13/site-packages/playwright/_impl/_connection.py:528: TimeoutError
----------------------------- Captured stdout call -----------------------------
welcome-modal is visible, closing it
Found close button with selector: #close-welcome-modal
Clicked close button
Modal closed successfully
Configuring API key and model...
--------------------------- Captured stdout teardown ---------------------------
HTTP server process already terminated
________________ test_only_tagged_functions_callable[chromium0] ________________

page = <Page url='http://localhost:8000/'>
serve_hacka_re = 'http://localhost:8000'
api_key = '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'

    def test_only_tagged_functions_callable(page: Page, serve_hacka_re, api_key):
        """Test that only tagged functions are callable when at least one tag is present."""
        # Set up console error logging
        setup_console_logging(page)
    
        # Navigate to the page
        page.goto(serve_hacka_re)
    
        # Dismiss welcome modal if present
        dismiss_welcome_modal(page)
    
        # Dismiss settings modal if already open
        # Configure API key and model
>       configure_api_key_and_model(page, api_key)

test_function_parsing_logic.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

page = <Page url='http://localhost:8000/'>
api_key = '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'

    def configure_api_key_and_model(page, api_key):
        """Configure API key and select a function calling model."""
        print("Configuring API key and model...")
    
        # Click the settings button
        settings_button = page.locator("#settings-btn")
        settings_button.click(timeout=1000)
    
        # Wait for the settings modal to become visible
        page.wait_for_selector("#settings-modal.active", state="visible", timeout=2000)
    
        # Take a screenshot of the settings modal for debugging
        page.screenshot(path="_tests/playwright/videos/settings_modal_initial.png")
    
        # Enter the API key from .env
        api_key_input = page.locator("#api-key-update")
        api_key_input.fill(api_key)
    
        # Get OPENAI_API_BASE and OPENAI_API_MODEL from conftest.py
        import sys
        import os
        # Add the parent directory (playwright) to path to import from main conftest
        playwright_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
        if playwright_dir not in sys.path:
            sys.path.insert(0, playwright_dir)
>       from conftest import OPENAI_API_BASE, OPENAI_API_MODEL
E       ImportError: cannot import name 'OPENAI_API_BASE' from 'conftest' (/Users/user/dev/hacka.re/_tests/playwright/shodan/conftest.py)

function_calling_api/helpers/setup_helpers.py:49: ImportError
----------------------------- Captured stdout call -----------------------------
welcome-modal is visible, closing it
Found close button with selector: #close-welcome-modal
Clicked close button
Modal closed successfully
Configuring API key and model...
--------------------------- Captured stdout teardown ---------------------------
HTTP server process already terminated
________________________ test_tool_tag_works[chromium0] ________________________

page = <Page url='http://localhost:8000/'>
serve_hacka_re = 'http://localhost:8000'
api_key = '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'

    def test_tool_tag_works(page: Page, serve_hacka_re, api_key):
        """Test that the @tool tag works the same as @callable."""
        # Set up console error logging
        setup_console_logging(page)
    
        # Navigate to the page
        page.goto(serve_hacka_re)
    
        # Dismiss welcome modal if present
        dismiss_welcome_modal(page)
    
        # Dismiss settings modal if already open
        # Configure API key and model
>       configure_api_key_and_model(page, api_key)

test_function_parsing_logic.py:272: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

page = <Page url='http://localhost:8000/'>
api_key = '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'

    def configure_api_key_and_model(page, api_key):
        """Configure API key and select a function calling model."""
        print("Configuring API key and model...")
    
        # Click the settings button
        settings_button = page.locator("#settings-btn")
        settings_button.click(timeout=1000)
    
        # Wait for the settings modal to become visible
        page.wait_for_selector("#settings-modal.active", state="visible", timeout=2000)
    
        # Take a screenshot of the settings modal for debugging
        page.screenshot(path="_tests/playwright/videos/settings_modal_initial.png")
    
        # Enter the API key from .env
        api_key_input = page.locator("#api-key-update")
        api_key_input.fill(api_key)
    
        # Get OPENAI_API_BASE and OPENAI_API_MODEL from conftest.py
        import sys
        import os
        # Add the parent directory (playwright) to path to import from main conftest
        playwright_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
        if playwright_dir not in sys.path:
            sys.path.insert(0, playwright_dir)
>       from conftest import OPENAI_API_BASE, OPENAI_API_MODEL
E       ImportError: cannot import name 'OPENAI_API_BASE' from 'conftest' (/Users/user/dev/hacka.re/_tests/playwright/shodan/conftest.py)

function_calling_api/helpers/setup_helpers.py:49: ImportError
----------------------------- Captured stdout call -----------------------------
welcome-modal is visible, closing it
Found close button with selector: #close-welcome-modal
Clicked close button
Modal closed successfully
Configuring API key and model...
--------------------------- Captured stdout teardown ---------------------------
HTTP server process already terminated
___________________ test_single_line_comment_tags[chromium0] ___________________

page = <Page url='http://localhost:8000/'>
serve_hacka_re = 'http://localhost:8000'
api_key = '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'

    def test_single_line_comment_tags(page: Page, serve_hacka_re, api_key):
        """Test that single-line comment tags work."""
        # Set up console error logging
        setup_console_logging(page)
    
        # Navigate to the page
        page.goto(serve_hacka_re)
    
        # Dismiss welcome modal if present
        dismiss_welcome_modal(page)
    
        # Dismiss settings modal if already open
        # Configure API key and model
>       configure_api_key_and_model(page, api_key)

test_function_parsing_logic.py:395: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

page = <Page url='http://localhost:8000/'>
api_key = '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'

    def configure_api_key_and_model(page, api_key):
        """Configure API key and select a function calling model."""
        print("Configuring API key and model...")
    
        # Click the settings button
        settings_button = page.locator("#settings-btn")
        settings_button.click(timeout=1000)
    
        # Wait for the settings modal to become visible
        page.wait_for_selector("#settings-modal.active", state="visible", timeout=2000)
    
        # Take a screenshot of the settings modal for debugging
        page.screenshot(path="_tests/playwright/videos/settings_modal_initial.png")
    
        # Enter the API key from .env
        api_key_input = page.locator("#api-key-update")
        api_key_input.fill(api_key)
    
        # Get OPENAI_API_BASE and OPENAI_API_MODEL from conftest.py
        import sys
        import os
        # Add the parent directory (playwright) to path to import from main conftest
        playwright_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
        if playwright_dir not in sys.path:
            sys.path.insert(0, playwright_dir)
>       from conftest import OPENAI_API_BASE, OPENAI_API_MODEL
E       ImportError: cannot import name 'OPENAI_API_BASE' from 'conftest' (/Users/user/dev/hacka.re/_tests/playwright/shodan/conftest.py)

function_calling_api/helpers/setup_helpers.py:49: ImportError
----------------------------- Captured stdout call -----------------------------
welcome-modal is visible, closing it
Found close button with selector: #close-welcome-modal
Clicked close button
Modal closed successfully
Configuring API key and model...
--------------------------- Captured stdout teardown ---------------------------
HTTP server process already terminated
_______________________ test_mixed_tag_types[chromium0] ________________________

page = <Page url='about:blank'>, serve_hacka_re = 'http://localhost:8000'
api_key = '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'

    def test_mixed_tag_types(page: Page, serve_hacka_re, api_key):
        """Test that mixed tag types work together."""
        # Set up console error logging
        setup_console_logging(page)
    
        # Navigate to the page
>       page.goto(serve_hacka_re)

test_function_parsing_logic.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.13/site-packages/playwright/sync_api/_generated.py:9024: in goto
    self._sync(
.venv/lib/python3.13/site-packages/playwright/_impl/_page.py:552: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
.venv/lib/python3.13/site-packages/playwright/_impl/_frame.py:145: in goto
    await self._channel.send("goto", locals_to_params(locals()))
.venv/lib/python3.13/site-packages/playwright/_impl/_connection.py:61: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <playwright._impl._connection.Connection object at 0x1110cf8c0>
cb = <function Channel.send.<locals>.<lambda> at 0x1127ec7c0>
is_internal = False

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(task, "__pw_stack__", inspect.stack())
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_SOCKET_NOT_CONNECTED at http://localhost:8000/
E           Call log:
E             - navigating to "http://localhost:8000/", waiting until "load"

.venv/lib/python3.13/site-packages/playwright/_impl/_connection.py:528: Error
--------------------------- Captured stdout teardown ---------------------------
HTTP server process already terminated
________________ test_multiple_function_collections[chromium1] _________________

page = <Page url='about:blank'>, serve_hacka_re = 'http://localhost:8000'
api_key = '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'

    def test_multiple_function_collections(page: Page, serve_hacka_re, api_key):
        """Test basic multiple function collections functionality"""
>       page.goto(serve_hacka_re)

test_function_deletion.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.13/site-packages/playwright/sync_api/_generated.py:9024: in goto
    self._sync(
.venv/lib/python3.13/site-packages/playwright/_impl/_page.py:552: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
.venv/lib/python3.13/site-packages/playwright/_impl/_frame.py:145: in goto
    await self._channel.send("goto", locals_to_params(locals()))
.venv/lib/python3.13/site-packages/playwright/_impl/_connection.py:61: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <playwright._impl._connection.Connection object at 0x1110cf8c0>
cb = <function Channel.send.<locals>.<lambda> at 0x1118d6840>
is_internal = False

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(task, "__pw_stack__", inspect.stack())
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_CONNECTION_REFUSED at http://localhost:8000/
E           Call log:
E             - navigating to "http://localhost:8000/", waiting until "load"

.venv/lib/python3.13/site-packages/playwright/_impl/_connection.py:528: Error
--------------------------- Captured stdout teardown ---------------------------
HTTP server process already terminated
__________________ test_function_collection_colors[chromium1] __________________

page = <Page url='http://localhost:8000/'>
serve_hacka_re = 'http://localhost:8000'
api_key = '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'

    def test_function_collection_colors(page: Page, serve_hacka_re, api_key):
        """Test that functions from the same import are collected by color and deletion works for the entire collection."""
        # Set up console error logging
        setup_console_logging(page)
    
        # Navigate to the page
        page.goto(serve_hacka_re)
    
        # Dismiss welcome modal if present
        dismiss_welcome_modal(page)
    
        # Dismiss settings modal if already open
        # Configure API key and model
>       configure_api_key_and_model(page, api_key)

test_function_group_colors.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

page = <Page url='http://localhost:8000/'>
api_key = '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'

    def configure_api_key_and_model(page, api_key):
        """Configure API key and select a function calling model."""
        print("Configuring API key and model...")
    
        # Click the settings button
        settings_button = page.locator("#settings-btn")
        settings_button.click(timeout=1000)
    
        # Wait for the settings modal to become visible
        page.wait_for_selector("#settings-modal.active", state="visible", timeout=2000)
    
        # Take a screenshot of the settings modal for debugging
        page.screenshot(path="_tests/playwright/videos/settings_modal_initial.png")
    
        # Enter the API key from .env
        api_key_input = page.locator("#api-key-update")
        api_key_input.fill(api_key)
    
        # Get OPENAI_API_BASE and OPENAI_API_MODEL from conftest.py
        import sys
        import os
        # Add the parent directory (playwright) to path to import from main conftest
        playwright_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
        if playwright_dir not in sys.path:
            sys.path.insert(0, playwright_dir)
>       from conftest import OPENAI_API_BASE, OPENAI_API_MODEL
E       ImportError: cannot import name 'OPENAI_API_BASE' from 'conftest' (/Users/user/dev/hacka.re/_tests/playwright/shodan/conftest.py)

function_calling_api/helpers/setup_helpers.py:49: ImportError
----------------------------- Captured stdout call -----------------------------
welcome-modal is visible, closing it
Found close button with selector: #close-welcome-modal
Clicked close button
Modal closed successfully
Configuring API key and model...
____________________ test_function_calling_icons[chromium1] ____________________

page = <Page url='http://localhost:8000/'>
serve_hacka_re = 'http://localhost:8000'
api_key = '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'

    def test_function_calling_icons(page: Page, serve_hacka_re, api_key):
        """Test that function calling icons appear inline with the token stream."""
        # Set up console error logging
        setup_console_logging(page)
    
        # Navigate to the page
        page.goto(serve_hacka_re)
    
        # Dismiss welcome modal if present
        dismiss_welcome_modal(page)
    
        # Dismiss settings modal if already open
        # Configure API key and model
>       configure_api_key_and_model(page, api_key)

test_function_icons.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

page = <Page url='http://localhost:8000/'>
api_key = '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'

    def configure_api_key_and_model(page, api_key):
        """Configure API key and select a function calling model."""
        print("Configuring API key and model...")
    
        # Click the settings button
        settings_button = page.locator("#settings-btn")
        settings_button.click(timeout=1000)
    
        # Wait for the settings modal to become visible
        page.wait_for_selector("#settings-modal.active", state="visible", timeout=2000)
    
        # Take a screenshot of the settings modal for debugging
        page.screenshot(path="_tests/playwright/videos/settings_modal_initial.png")
    
        # Enter the API key from .env
        api_key_input = page.locator("#api-key-update")
        api_key_input.fill(api_key)
    
        # Get OPENAI_API_BASE and OPENAI_API_MODEL from conftest.py
        import sys
        import os
        # Add the parent directory (playwright) to path to import from main conftest
        playwright_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
        if playwright_dir not in sys.path:
            sys.path.insert(0, playwright_dir)
>       from conftest import OPENAI_API_BASE, OPENAI_API_MODEL
E       ImportError: cannot import name 'OPENAI_API_BASE' from 'conftest' (/Users/user/dev/hacka.re/_tests/playwright/shodan/conftest.py)

function_calling_api/helpers/setup_helpers.py:49: ImportError
----------------------------- Captured stdout call -----------------------------
welcome-modal is visible, closing it
Found close button with selector: #close-welcome-modal
Clicked close button
Modal closed successfully
Configuring API key and model...
________________ test_multiple_function_calls_colors[chromium1] ________________

page = <Page url='http://localhost:8000/'>
serve_hacka_re = 'http://localhost:8000'
api_key = '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'

    def test_multiple_function_calls_colors(page: Page, serve_hacka_re, api_key):
        """Test that multiple function calls use different colors."""
        # Set up console error logging
        setup_console_logging(page)
    
        # Navigate to the page
        page.goto(serve_hacka_re)
    
        # Dismiss welcome modal if present
        dismiss_welcome_modal(page)
    
        # Dismiss settings modal if already open
        # Configure API key and model
>       configure_api_key_and_model(page, api_key)

test_function_icons.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

page = <Page url='http://localhost:8000/'>
api_key = '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'

    def configure_api_key_and_model(page, api_key):
        """Configure API key and select a function calling model."""
        print("Configuring API key and model...")
    
        # Click the settings button
        settings_button = page.locator("#settings-btn")
        settings_button.click(timeout=1000)
    
        # Wait for the settings modal to become visible
        page.wait_for_selector("#settings-modal.active", state="visible", timeout=2000)
    
        # Take a screenshot of the settings modal for debugging
        page.screenshot(path="_tests/playwright/videos/settings_modal_initial.png")
    
        # Enter the API key from .env
        api_key_input = page.locator("#api-key-update")
        api_key_input.fill(api_key)
    
        # Get OPENAI_API_BASE and OPENAI_API_MODEL from conftest.py
        import sys
        import os
        # Add the parent directory (playwright) to path to import from main conftest
        playwright_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
        if playwright_dir not in sys.path:
            sys.path.insert(0, playwright_dir)
>       from conftest import OPENAI_API_BASE, OPENAI_API_MODEL
E       ImportError: cannot import name 'OPENAI_API_BASE' from 'conftest' (/Users/user/dev/hacka.re/_tests/playwright/shodan/conftest.py)

function_calling_api/helpers/setup_helpers.py:49: ImportError
----------------------------- Captured stdout call -----------------------------
welcome-modal is visible, closing it
Found close button with selector: #close-welcome-modal
Clicked close button
Modal closed successfully
Configuring API key and model...
____________________ test_function_library_multi[chromium1] ____________________

page = <Page url='http://localhost:8000/'>
serve_hacka_re = 'http://localhost:8000'
api_key = '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'

    def test_function_library_multi(page: Page, serve_hacka_re, api_key):
        """Test the multi-function library with @tool tag."""
        # Set up console error logging
        setup_console_logging(page)
    
        # Navigate to the page
        page.goto(serve_hacka_re)
    
        # Dismiss welcome modal if present
        dismiss_welcome_modal(page)
    
        # Dismiss settings modal if already open
        # Configure API key and model
>       configure_api_key_and_model(page, api_key)

test_function_library_multi.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

page = <Page url='http://localhost:8000/'>
api_key = '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'

    def configure_api_key_and_model(page, api_key):
        """Configure API key and select a function calling model."""
        print("Configuring API key and model...")
    
        # Click the settings button
        settings_button = page.locator("#settings-btn")
        settings_button.click(timeout=1000)
    
        # Wait for the settings modal to become visible
        page.wait_for_selector("#settings-modal.active", state="visible", timeout=2000)
    
        # Take a screenshot of the settings modal for debugging
        page.screenshot(path="_tests/playwright/videos/settings_modal_initial.png")
    
        # Enter the API key from .env
        api_key_input = page.locator("#api-key-update")
        api_key_input.fill(api_key)
    
        # Get OPENAI_API_BASE and OPENAI_API_MODEL from conftest.py
        import sys
        import os
        # Add the parent directory (playwright) to path to import from main conftest
        playwright_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
        if playwright_dir not in sys.path:
            sys.path.insert(0, playwright_dir)
>       from conftest import OPENAI_API_BASE, OPENAI_API_MODEL
E       ImportError: cannot import name 'OPENAI_API_BASE' from 'conftest' (/Users/user/dev/hacka.re/_tests/playwright/shodan/conftest.py)

function_calling_api/helpers/setup_helpers.py:49: ImportError
----------------------------- Captured stdout call -----------------------------
welcome-modal is visible, closing it
Found close button with selector: #close-welcome-modal
Clicked close button
Modal closed successfully
Configuring API key and model...
___________________ test_function_library_sharing[chromium1] ___________________

page = <Page url='http://localhost:8000/'>
serve_hacka_re = 'http://localhost:8000'

    def test_function_library_sharing(page: Page, serve_hacka_re):
        """
        Test that function library can be shared and loaded from a shared link.
    
        This test:
        1. Creates a test function
        2. Shares it using the function library option
        3. Deletes the function
        4. Loads the shared link
        5. Verifies the function is restored
        """
        # STEP 1: Navigate to the application
        page.goto(serve_hacka_re)
    
        # STEP 2: Handle welcome and settings modals
        dismiss_welcome_modal(page)
        # STEP 3: Configure API key and model
        # Click the settings button
        settings_button = page.locator("#settings-btn")
        settings_button.click()
    
        # Wait for the settings modal to become visible
        page.wait_for_selector("#settings-modal.active", state="visible")
    
        # Enter the API key
        api_key_input = page.locator("#api-key-update")
        api_key_input.fill(API_KEY)
    
        # Select OpenAI as the API provider
        base_url_select = page.locator("#base-url-select")
        base_url_select.select_option("openai")
    
        # Select a model
        from test_utils import select_recommended_test_model
        selected_model = select_recommended_test_model(page)
    
        # Settings auto-save, wait and close
        page.wait_for_timeout(1000)
        close_button = page.locator("#close-settings")
        close_button.click()
    
        # Wait for the settings modal to be closed
        page.wait_for_selector("#settings-modal", state="hidden")
    
        # STEP 4: Create a test function
        # Open the function modal
        function_btn = page.locator("#function-btn")
        function_btn.click()
    
        # Wait for the function modal to be visible
        function_modal = page.locator("#function-modal")
        expect(function_modal).to_be_visible()
    
        # First, set the function code - the name field will be auto-populated
        function_name = "test_shared_function"
        function_code = f"""function {function_name}(text) {{
      return {{
        message: "You said: " + text,
        timestamp: new Date().toISOString()
      }};
    }}"""
    
        function_code_input = page.locator("#function-code")
        function_code_input.scroll_into_view_if_needed()
        expect(function_code_input).to_be_visible()
        function_code_input.fill(function_code)
    
        # Trigger the auto-population by firing an input event
        page.evaluate("""() => {
            const codeTextarea = document.getElementById('function-code');
            if (codeTextarea) {
                codeTextarea.dispatchEvent(new Event('input', { bubbles: true }));
            }
        }""")
    
        # Wait a moment for auto-population to happen
        # page.wait_for_timeout(500)  # TODO: Replace with proper wait condition
    
        # Verify the function name field was auto-populated
        name_value = page.evaluate("""() => {
            const nameField = document.getElementById('function-name');
            return nameField ? nameField.value : null;
        }""")
    
        if name_value:
            assert name_value == function_name, f"Expected '{function_name}', got '{name_value}'"
    
        # Validate the function
        validate_btn = page.locator("#function-validate-btn")
        validate_btn.scroll_into_view_if_needed()
        expect(validate_btn).to_be_visible()
        validate_btn.click()
    
        # Wait for validation result
        validation_result = page.locator("#function-validation-result")
        page.wait_for_selector("#function-validation-result:not(:empty)", state="visible")
        expect(validation_result).to_contain_text("Library validated successfully")
    
        # Save the function
        save_btn = page.locator("#function-editor-form button[type='submit']")
        save_btn.scroll_into_view_if_needed()
        expect(save_btn).to_be_visible()
        save_btn.click()
    
        # Verify the function was added to the list
        function_list = page.locator("#function-list")
        page.wait_for_selector(f".function-item-name:has-text('{function_name}')", state="visible")
        expect(function_list.locator(f".function-item-name:has-text('{function_name}')")).to_be_visible()
    
        # Take a screenshot after adding the function
        screenshot_with_markdown(page, "function_library_sharing_function_added", {
            "step": "Added test function for sharing",
            "function_name": function_name
        })
    
        # Close the function modal
        close_function_modal_btn = page.locator("#close-function-modal")
        close_function_modal_btn.click()
    
        # STEP 5: Share the function library
        # Open the share modal
        share_btn = page.locator("#share-btn")
        share_btn.click()
    
        # Wait for the share modal to be visible
        share_modal = page.locator("#share-modal")
        expect(share_modal).to_be_visible()
    
        # Set a test password
        test_password = "TestPassword123"
        password_input = page.locator("#share-password")
        password_input.fill(test_password)
    
        # Check the function library checkbox
        function_library_checkbox = page.locator("#share-function-library")
        function_library_checkbox.check()
    
        # Also check API key checkbox to ensure we have something to share
        api_key_checkbox = page.locator("#share-api-key")
        api_key_checkbox.check()
    
        # Take a screenshot of the share modal
        screenshot_with_markdown(page, "function_library_sharing_share_modal", {
            "step": "Share modal with function library option checked",
            "password": test_password,
            "function_library_checked": function_library_checkbox.is_checked(),
            "api_key_checked": api_key_checkbox.is_checked()
        })
    
        # Generate the share link
        generate_link_btn = page.locator("#generate-share-link-btn")
        generate_link_btn.click()
    
        # Wait a moment for the link generation process
        # page.wait_for_timeout(1000)  # TODO: Replace with proper wait condition
    
        # Take a screenshot after clicking generate button
        screenshot_with_markdown(page, "function_library_sharing_after_generate", {
            "step": "After clicking generate link button",
            "container_visible": page.locator("#generated-link-container").is_visible()
        })
    
        # Wait for the link to be generated
        generated_link_container = page.locator("#generated-link-container")
        expect(generated_link_container).to_be_visible()
    
        # Get the generated link
        generated_link = page.locator("#generated-link").input_value()
    
        # Validate the link is not empty and has the expected format
        assert generated_link, "Generated link is empty"
        assert "#gpt=" in generated_link, f"Generated link doesn't contain #gpt= fragment: {generated_link}"
    
        # Take a screenshot of the generated link
        screenshot_with_markdown(page, "function_library_sharing_generated_link", {
            "step": "Generated share link",
            "link_length": len(generated_link),
            "link_preview": generated_link[:100] + "..." if len(generated_link) > 100 else generated_link,
            "has_gpt_fragment": "#gpt=" in generated_link
        })
    
        # Close the share modal
        close_share_modal_btn = page.locator("#close-share-modal")
        close_share_modal_btn.click()
    
        # STEP 6: Delete the function
        # Open the function modal again
        function_btn.click()
        expect(function_modal).to_be_visible()
    
        # Delete the function
        # Handle the confirmation dialog
        page.on("dialog", lambda dialog: dialog.accept())
    
        # Find and click the delete button for the function
        # The delete button is in the same function-item div as the function name
        function_item = page.locator(f"#function-list .function-item").filter(has=page.locator(f".function-item-name:has-text('{function_name}')"))
        delete_btn = function_item.locator(".function-item-delete")
>       delete_btn.click()

test_function_library_sharing.py:212: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.13/site-packages/playwright/sync_api/_generated.py:15512: in click
    self._sync(
.venv/lib/python3.13/site-packages/playwright/_impl/_locator.py:160: in click
    return await self._frame.click(self._selector, strict=True, **params)
.venv/lib/python3.13/site-packages/playwright/_impl/_frame.py:488: in click
    await self._channel.send("click", locals_to_params(locals()))
.venv/lib/python3.13/site-packages/playwright/_impl/_connection.py:61: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <playwright._impl._connection.Connection object at 0x1110cf8c0>
cb = <function Channel.send.<locals>.<lambda> at 0x1119d2b60>
is_internal = False

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(task, "__pw_stack__", inspect.stack())
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.TimeoutError: Locator.click: Timeout 10000ms exceeded.
E           Call log:
E             - waiting for locator("#function-list .function-item").filter(has=locator(".function-item-name:has-text('test_shared_function')")).locator(".function-item-delete")

.venv/lib/python3.13/site-packages/playwright/_impl/_connection.py:528: TimeoutError
----------------------------- Captured stdout call -----------------------------
welcome-modal is visible, closing it
Found close button with selector: #close-welcome-modal
Clicked close button
Modal closed successfully
Available options in model select dropdown:
  Option: -- Default models (API unavailable) -- (value: , disabled: True)
  Option: 🇺🇸 Gpt 4o Mini (value: gpt-4o-mini, disabled: False)
  Option: 🇺🇸 Gpt 4o (value: gpt-4o, disabled: False)
  Option: 🇺🇸 Gpt 4 Turbo (value: gpt-4-turbo, disabled: False)
  Option: 🇺🇸 Gpt 3.5 Turbo (value: gpt-3.5-turbo, disabled: False)
Recommended model not available. Selecting first option: gpt-4o-mini
______________ test_all_functions_callable_by_default[chromium1] _______________

page = <Page url='about:blank'>, serve_hacka_re = 'http://localhost:8000'
api_key = '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'

    def test_all_functions_callable_by_default(page: Page, serve_hacka_re, api_key):
        """Test that all functions are callable by default when no tags are present."""
        # Set up console error logging
        setup_console_logging(page)
    
        # Navigate to the page
>       page.goto(serve_hacka_re)

test_function_parsing_logic.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.13/site-packages/playwright/sync_api/_generated.py:9024: in goto
    self._sync(
.venv/lib/python3.13/site-packages/playwright/_impl/_page.py:552: in goto
    return await self._main_frame.goto(**locals_to_params(locals()))
.venv/lib/python3.13/site-packages/playwright/_impl/_frame.py:145: in goto
    await self._channel.send("goto", locals_to_params(locals()))
.venv/lib/python3.13/site-packages/playwright/_impl/_connection.py:61: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <playwright._impl._connection.Connection object at 0x1110cf8c0>
cb = <function Channel.send.<locals>.<lambda> at 0x1119e9ee0>
is_internal = False

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False
    ) -> Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(task, "__pw_stack__", inspect.stack())
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
>           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.Error: Page.goto: net::ERR_ABORTED at http://localhost:8000/
E           Call log:
E             - navigating to "http://localhost:8000/", waiting until "load"

.venv/lib/python3.13/site-packages/playwright/_impl/_connection.py:528: Error
________________ test_only_tagged_functions_callable[chromium1] ________________

page = <Page url='http://localhost:8000/'>
serve_hacka_re = 'http://localhost:8000'
api_key = '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'

    def test_only_tagged_functions_callable(page: Page, serve_hacka_re, api_key):
        """Test that only tagged functions are callable when at least one tag is present."""
        # Set up console error logging
        setup_console_logging(page)
    
        # Navigate to the page
        page.goto(serve_hacka_re)
    
        # Dismiss welcome modal if present
        dismiss_welcome_modal(page)
    
        # Dismiss settings modal if already open
        # Configure API key and model
>       configure_api_key_and_model(page, api_key)

test_function_parsing_logic.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

page = <Page url='http://localhost:8000/'>
api_key = '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'

    def configure_api_key_and_model(page, api_key):
        """Configure API key and select a function calling model."""
        print("Configuring API key and model...")
    
        # Click the settings button
        settings_button = page.locator("#settings-btn")
        settings_button.click(timeout=1000)
    
        # Wait for the settings modal to become visible
        page.wait_for_selector("#settings-modal.active", state="visible", timeout=2000)
    
        # Take a screenshot of the settings modal for debugging
        page.screenshot(path="_tests/playwright/videos/settings_modal_initial.png")
    
        # Enter the API key from .env
        api_key_input = page.locator("#api-key-update")
        api_key_input.fill(api_key)
    
        # Get OPENAI_API_BASE and OPENAI_API_MODEL from conftest.py
        import sys
        import os
        # Add the parent directory (playwright) to path to import from main conftest
        playwright_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
        if playwright_dir not in sys.path:
            sys.path.insert(0, playwright_dir)
>       from conftest import OPENAI_API_BASE, OPENAI_API_MODEL
E       ImportError: cannot import name 'OPENAI_API_BASE' from 'conftest' (/Users/user/dev/hacka.re/_tests/playwright/shodan/conftest.py)

function_calling_api/helpers/setup_helpers.py:49: ImportError
----------------------------- Captured stdout call -----------------------------
welcome-modal is visible, closing it
Found close button with selector: #close-welcome-modal
Clicked close button
Modal closed successfully
Configuring API key and model...
________________________ test_tool_tag_works[chromium1] ________________________

page = <Page url='http://localhost:8000/'>
serve_hacka_re = 'http://localhost:8000'
api_key = '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'

    def test_tool_tag_works(page: Page, serve_hacka_re, api_key):
        """Test that the @tool tag works the same as @callable."""
        # Set up console error logging
        setup_console_logging(page)
    
        # Navigate to the page
        page.goto(serve_hacka_re)
    
        # Dismiss welcome modal if present
        dismiss_welcome_modal(page)
    
        # Dismiss settings modal if already open
        # Configure API key and model
>       configure_api_key_and_model(page, api_key)

test_function_parsing_logic.py:272: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

page = <Page url='http://localhost:8000/'>
api_key = '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'

    def configure_api_key_and_model(page, api_key):
        """Configure API key and select a function calling model."""
        print("Configuring API key and model...")
    
        # Click the settings button
        settings_button = page.locator("#settings-btn")
        settings_button.click(timeout=1000)
    
        # Wait for the settings modal to become visible
        page.wait_for_selector("#settings-modal.active", state="visible", timeout=2000)
    
        # Take a screenshot of the settings modal for debugging
        page.screenshot(path="_tests/playwright/videos/settings_modal_initial.png")
    
        # Enter the API key from .env
        api_key_input = page.locator("#api-key-update")
        api_key_input.fill(api_key)
    
        # Get OPENAI_API_BASE and OPENAI_API_MODEL from conftest.py
        import sys
        import os
        # Add the parent directory (playwright) to path to import from main conftest
        playwright_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
        if playwright_dir not in sys.path:
            sys.path.insert(0, playwright_dir)
>       from conftest import OPENAI_API_BASE, OPENAI_API_MODEL
E       ImportError: cannot import name 'OPENAI_API_BASE' from 'conftest' (/Users/user/dev/hacka.re/_tests/playwright/shodan/conftest.py)

function_calling_api/helpers/setup_helpers.py:49: ImportError
----------------------------- Captured stdout call -----------------------------
welcome-modal is visible, closing it
Found close button with selector: #close-welcome-modal
Clicked close button
Modal closed successfully
Configuring API key and model...
___________________ test_single_line_comment_tags[chromium1] ___________________

page = <Page url='http://localhost:8000/'>
serve_hacka_re = 'http://localhost:8000'
api_key = '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'

    def test_single_line_comment_tags(page: Page, serve_hacka_re, api_key):
        """Test that single-line comment tags work."""
        # Set up console error logging
        setup_console_logging(page)
    
        # Navigate to the page
        page.goto(serve_hacka_re)
    
        # Dismiss welcome modal if present
        dismiss_welcome_modal(page)
    
        # Dismiss settings modal if already open
        # Configure API key and model
>       configure_api_key_and_model(page, api_key)

test_function_parsing_logic.py:395: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

page = <Page url='http://localhost:8000/'>
api_key = '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'

    def configure_api_key_and_model(page, api_key):
        """Configure API key and select a function calling model."""
        print("Configuring API key and model...")
    
        # Click the settings button
        settings_button = page.locator("#settings-btn")
        settings_button.click(timeout=1000)
    
        # Wait for the settings modal to become visible
        page.wait_for_selector("#settings-modal.active", state="visible", timeout=2000)
    
        # Take a screenshot of the settings modal for debugging
        page.screenshot(path="_tests/playwright/videos/settings_modal_initial.png")
    
        # Enter the API key from .env
        api_key_input = page.locator("#api-key-update")
        api_key_input.fill(api_key)
    
        # Get OPENAI_API_BASE and OPENAI_API_MODEL from conftest.py
        import sys
        import os
        # Add the parent directory (playwright) to path to import from main conftest
        playwright_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
        if playwright_dir not in sys.path:
            sys.path.insert(0, playwright_dir)
>       from conftest import OPENAI_API_BASE, OPENAI_API_MODEL
E       ImportError: cannot import name 'OPENAI_API_BASE' from 'conftest' (/Users/user/dev/hacka.re/_tests/playwright/shodan/conftest.py)

function_calling_api/helpers/setup_helpers.py:49: ImportError
----------------------------- Captured stdout call -----------------------------
welcome-modal is visible, closing it
Found close button with selector: #close-welcome-modal
Clicked close button
Modal closed successfully
Configuring API key and model...
_______________________ test_mixed_tag_types[chromium1] ________________________

page = <Page url='http://localhost:8000/'>
serve_hacka_re = 'http://localhost:8000'
api_key = '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'

    def test_mixed_tag_types(page: Page, serve_hacka_re, api_key):
        """Test that mixed tag types work together."""
        # Set up console error logging
        setup_console_logging(page)
    
        # Navigate to the page
        page.goto(serve_hacka_re)
    
        # Dismiss welcome modal if present
        dismiss_welcome_modal(page)
    
        # Dismiss settings modal if already open
        # Configure API key and model
>       configure_api_key_and_model(page, api_key)

test_function_parsing_logic.py:519: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

page = <Page url='http://localhost:8000/'>
api_key = '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'

    def configure_api_key_and_model(page, api_key):
        """Configure API key and select a function calling model."""
        print("Configuring API key and model...")
    
        # Click the settings button
        settings_button = page.locator("#settings-btn")
        settings_button.click(timeout=1000)
    
        # Wait for the settings modal to become visible
        page.wait_for_selector("#settings-modal.active", state="visible", timeout=2000)
    
        # Take a screenshot of the settings modal for debugging
        page.screenshot(path="_tests/playwright/videos/settings_modal_initial.png")
    
        # Enter the API key from .env
        api_key_input = page.locator("#api-key-update")
        api_key_input.fill(api_key)
    
        # Get OPENAI_API_BASE and OPENAI_API_MODEL from conftest.py
        import sys
        import os
        # Add the parent directory (playwright) to path to import from main conftest
        playwright_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
        if playwright_dir not in sys.path:
            sys.path.insert(0, playwright_dir)
>       from conftest import OPENAI_API_BASE, OPENAI_API_MODEL
E       ImportError: cannot import name 'OPENAI_API_BASE' from 'conftest' (/Users/user/dev/hacka.re/_tests/playwright/shodan/conftest.py)

function_calling_api/helpers/setup_helpers.py:49: ImportError
----------------------------- Captured stdout call -----------------------------
welcome-modal is visible, closing it
Found close button with selector: #close-welcome-modal
Clicked close button
Modal closed successfully
Configuring API key and model...
=============================== warnings summary ===============================
test_complete_mcp_share_flow.py:8
  /Users/user/dev/hacka.re/_tests/playwright/test_complete_mcp_share_flow.py:8: PytestUnknownMarkWarning: Unknown pytest.mark.feature_test - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.feature_test

test_cross_tab_loop_fix.py:8
  /Users/user/dev/hacka.re/_tests/playwright/test_cross_tab_loop_fix.py:8: PytestUnknownMarkWarning: Unknown pytest.mark.feature_test - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.feature_test

test_cross_tab_sync_optimization.py:7
  /Users/user/dev/hacka.re/_tests/playwright/test_cross_tab_sync_optimization.py:7: PytestUnknownMarkWarning: Unknown pytest.mark.feature_test - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.feature_test

test_cross_tab_sync_optimization.py:59
  /Users/user/dev/hacka.re/_tests/playwright/test_cross_tab_sync_optimization.py:59: PytestUnknownMarkWarning: Unknown pytest.mark.feature_test - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.feature_test

test_debug_utils.py:25
  /Users/user/dev/hacka.re/_tests/playwright/test_debug_utils.py:25: PytestCollectionWarning: cannot collect test class 'TestDebugger' because it has a __init__ constructor (from: test_debug_utils.py)
    class TestDebugger:

test_debug_utils.py:25
  /Users/user/dev/hacka.re/_tests/playwright/test_debug_utils.py:25: PytestCollectionWarning: cannot collect test class 'TestDebugger' because it has a __init__ constructor (from: test_example_with_debugging.py)
    class TestDebugger:

test_rag_multi_query.py:104
  /Users/user/dev/hacka.re/_tests/playwright/test_rag_multi_query.py:104: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

test_rag_multi_query.py:375
  /Users/user/dev/hacka.re/_tests/playwright/test_rag_multi_query.py:375: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

test_rag_similarity_scores.py:14
  /Users/user/dev/hacka.re/_tests/playwright/test_rag_similarity_scores.py:14: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED test_function_group_colors.py::test_function_collection_colors[chromium0]
FAILED test_function_icons.py::test_function_calling_icons[chromium0] - Impor...
FAILED test_function_icons.py::test_multiple_function_calls_colors[chromium0]
FAILED test_function_library_multi.py::test_function_library_multi[chromium0]
FAILED test_function_library_sharing.py::test_function_library_sharing[chromium0]
FAILED test_function_modal.py::test_function_modal_basic[chromium0] - Asserti...
FAILED test_function_parsing_logic.py::test_all_functions_callable_by_default[chromium0]
FAILED test_function_parsing_logic.py::test_only_tagged_functions_callable[chromium0]
FAILED test_function_parsing_logic.py::test_tool_tag_works[chromium0] - Impor...
FAILED test_function_parsing_logic.py::test_single_line_comment_tags[chromium0]
FAILED test_function_parsing_logic.py::test_mixed_tag_types[chromium0] - play...
FAILED test_function_deletion.py::test_multiple_function_collections[chromium1]
FAILED test_function_group_colors.py::test_function_collection_colors[chromium1]
FAILED test_function_icons.py::test_function_calling_icons[chromium1] - Impor...
FAILED test_function_icons.py::test_multiple_function_calls_colors[chromium1]
FAILED test_function_library_multi.py::test_function_library_multi[chromium1]
FAILED test_function_library_sharing.py::test_function_library_sharing[chromium1]
FAILED test_function_parsing_logic.py::test_all_functions_callable_by_default[chromium1]
FAILED test_function_parsing_logic.py::test_only_tagged_functions_callable[chromium1]
FAILED test_function_parsing_logic.py::test_tool_tag_works[chromium1] - Impor...
FAILED test_function_parsing_logic.py::test_single_line_comment_tags[chromium1]
FAILED test_function_parsing_logic.py::test_mixed_tag_types[chromium1] - Impo...
==== 22 failed, 18 passed, 878 deselected, 9 warnings in 254.86s (0:04:14) =====
Generating test results markdown files...
No arguments provided. Using default files.
Processing default files...
Generating markdown report for 'test_output.log' -> 'test_results.md'...
Markdown report generated: test_results.md
You can view it with: glow -p test_results.md
Warning: Output file 'run_tests.out_bundle.md' is newer than input file 'run_tests.out'.
This suggests the bundle has already been generated for this test run.
To regenerate, delete 'run_tests.out_bundle.md' first.

All function test output, including any Ctrl+C interruptions, has been captured to run_function_tests.out
A bundled markdown report has been generated at run_tests.out_bundle.md
You can view the markdown report with: glow -p run_tests.out_bundle.md
These files can be used by the coding assistant LLM to analyze test results
Stopping HTTP server...
===== Stopping HTTP Server for hacka.re Tests =====
PID file not found: /Users/user/dev/hacka.re/_tests/playwright/server_pid.txt
Checking for any HTTP server processes on port 8000...
No existing processes found on port 8000.
==================================================
Server stopped.
