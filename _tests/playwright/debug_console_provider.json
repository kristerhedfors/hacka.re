[
  {
    "timestamp": "13:30:0",
    "type": "error",
    "text": "Failed to load resource: the server responded with a status of 404 (File not found)"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "[StorageTypeService] Detected direct entry - using sessionStorage (LOCKED)"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "[MCPProviderFactory] Initialized (built-in providers will be registered by modules)"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "[MCPToolRegistry] Initialized enhanced tool registry"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "GitHub Provider: Starting initialization..."
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "GitHub Provider: All modules loaded successfully"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "GitHub Provider (modular) loaded and initialized successfully"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "[MCP Client] Initialized successfully"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Loading Code Section prompt..."
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Adding OpenAI Proxies Python prompt to Code section: {id: openai-proxies-python, name: OpenAI Proxy - Python, content: OpenAI Proxies - Python\n\nThree minimal Python prox\u2026ncies: starlette, uvicorn, flask, httpx, requests}"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Loaded 4 default prompts"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Default prompts structure: [Object, Object, Object, Object]"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Code section found with items: [Object, Object, Object, Object, Object]"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Code section items count: 5"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Loaded 3 default function collections: [RC4 Encryption, Math Utilities, MCP Examples]"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "MCP Size Estimator: Global functions registered"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "[MCPQuickConnectors] Current window.location.origin: http://localhost:8000"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Initializing copy buttons"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Copy button event listener initialized"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Agent Manager utilities initialized"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "\ud83d\ude80 AIHackare: Initializing model selection manager..."
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "No context window size found for model: "
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Empty default system prompt loaded successfully"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "API Tools Manager initialized"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Function Modal Manager initialized"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "MCP Server Manager initialized"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Function Editor Manager initialized with modular components"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Function Copy Manager initialized"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "=== Loading selected default functions ==="
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Selected function IDs from storage: []"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Loaded 0 individual default functions"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "All enabled functions after loading default functions: []"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Default functions loaded"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Function Calling Manager initialized with all components"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "PromptsService.applySelectedPromptsAsSystem called"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Prompts manager context usage update needed"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "System prompt updated, length: 0"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "System prompt applied via coordinator, has content: false"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "\u2705 MCP checkbox event listener attached successfully"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "AIHackare: Generate share link button found, adding event listener"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "System prompt updated, length: 0"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "SystemPromptCoordinator initialized"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "[MCPUIManager] Adding quick connectors to modal"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "[MCPQuickConnectors] Creating quick connectors UI JSHandle@node"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "[MCPQuickConnectors] Quick connectors placeholder found: true"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "[MCPQuickConnectors] Quick connectors section replaced placeholder"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "[MCPOAuthIntegration] Initialized"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "[MCPManager] OAuth integration initialized"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "[MCPManager] Attempting to initialize quick connectors"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "[MCPQuickConnectors] Initializing..."
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "[MCPQuickConnectors] Service availability check: {storageService: true, oauthConfig: true, oauthFlow: true, mcpClient: true}"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "[MCPQuickConnectors] Initialized successfully"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "[MCPManager] Quick connectors initialized"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "[MCPManager] Initialization complete"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Title and subtitle updated to: hacka.re - Free, open, f\u00f6r hackare av hackare"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ASCII Tree Menu: Initializing..."
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ASCII Tree Menu: Events bound"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ModalEffects: Initializing"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ModalEffects: Found 13 modals"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ModalEffects: Setting up observer for modal 1"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ModalEffects: Setting up observer for modal 2"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ModalEffects: Setting up observer for modal 3"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ModalEffects: Setting up observer for modal 4"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ModalEffects: Setting up observer for modal 5"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ModalEffects: Setting up observer for modal 6"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ModalEffects: Setting up observer for modal 7"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ModalEffects: Setting up observer for modal 8"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ModalEffects: Setting up observer for modal 9"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ModalEffects: Setting up observer for modal 10"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ModalEffects: Setting up observer for modal 11"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ModalEffects: Setting up observer for modal 12"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ModalEffects: Setting up observer for modal 13"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Highlight.js initialized successfully"
  },
  {
    "timestamp": "13:30:0",
    "type": "verbose",
    "text": "[DOM] Password field is not contained in a form: (More info: https://goo.gl/9p2vKq) %o"
  },
  {
    "timestamp": "13:30:0",
    "type": "verbose",
    "text": "[DOM] Input elements should have autocomplete attributes (suggested: \"new-password\"): (More info: https://goo.gl/9p2vKq) %o"
  },
  {
    "timestamp": "13:30:0",
    "type": "verbose",
    "text": "[DOM] Input elements should have autocomplete attributes (suggested: \"current-password\"): (More info: https://goo.gl/9p2vKq) %o"
  },
  {
    "timestamp": "13:30:0",
    "type": "error",
    "text": "Failed to load resource: net::ERR_CONNECTION_REFUSED"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "\ud83d\udd27 UICoordinator: Attempting to initialize model selector manager..."
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "\ud83d\udd27 UICoordinator: window.aiHackare available: true"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "\ud83d\udd27 UICoordinator: First attempt failed, retrying in 500ms..."
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "\ud83d\ude80 ModelSelectionManager initialized"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "\u2705 AIHackare: ModelSelectionManager initialized"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Extracting functions with regex: (\\/\\*\\*[\\s\\S]*?\\*\\/\\s*)?(\\/\\/.*?(?:\\n\\s*|$))?(?:async\\s+)?function\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\(([^)]*)\\)\\s*{"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ModalEffects: All modals closed, removing modal-open class from body"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Initial check: {storageType: sessionStorage, currentProvider: openai, sessionKeys: 4}"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ModalEffects: Modal opened, adding modal-open class to body"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "\ud83d\udd27 UICoordinator: Attempting to initialize model selector manager..."
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "\ud83d\udd27 UICoordinator: window.aiHackare available: true"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "\ud83d\udd27 UICoordinator: Second attempt failed, retrying in 1000ms..."
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Provider dropdown changed to: groq"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "DataService available: true"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "BaseUrlManager available: true"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "Provider after change event: groq"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "\ud83d\ude80 ModelSelectionManager initialized"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "\ud83d\udd27 UICoordinator: Attempting to initialize model selector manager..."
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "\ud83d\udd27 UICoordinator: window.aiHackare available: true"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "After groq selection: {savedProvider: groq, dropdownValue: groq, sessionKeys: 6}"
  },
  {
    "timestamp": "13:30:0",
    "type": "log",
    "text": "ModalEffects: All modals closed, removing modal-open class from body"
  },
  {
    "timestamp": "13:30:1",
    "type": "log",
    "text": "ModalEffects: Modal opened, adding modal-open class to body"
  },
  {
    "timestamp": "13:30:1",
    "type": "log",
    "text": "Final check after reopen: {savedProvider: groq, dropdownValue: groq}"
  }
]